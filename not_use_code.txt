// object on scene, ex: stone, walls
typedef struct object {
    int x, y;             // the position of image
    int width, height;    // the width and height of image
    // int state;            // the state of character
    // bool under_atk_cd;    // under attack cool down
    ALLEGRO_BITMAP* img;
    bool collisable;    // has collision box or not
    // ALLEGRO_SAMPLE_INSTANCE* hit_Sound;
    // int anime;         // counting the time of animation
    // int anime_time;    // indicate how long the animation
} Object;
int objects_end_index = 0;
Object objects[MAX_OBJECT_NUM + 1];
void object_init(int x, int y, char* object_name, bool colli) {    // object id: type of the object
    char img_path[50];
    sprintf(img_path, "./image/%s.png", object_name);
    objects[objects_end_index].img = al_load_bitmap(img_path);

    objects[objects_end_index].x = x;
    objects[objects_end_index].y = y;

    objects[objects_end_index].width = al_get_bitmap_width(objects[objects_end_index].img);
    objects[objects_end_index].height = al_get_bitmap_height(objects[objects_end_index].img);

    objects[objects_end_index].collisable = colli;

    objects_end_index++;
}
void objects_draw() {
    for (int i = 0; i != objects_end_index; i++) {
        al_draw_bitmap(objects[i].img, objects[i].x, objects[i].y, 0);
    }
}
void objects_destory() {
    for (int i = 0; i < MAX_OBJECT_NUM; i++) {
        al_destroy_bitmap(objects[i].img);
    }
}
